import pytest
import allure
from playwright.sync_api import Page
from pages.login_page import LoginPage
import logging

@allure.epic("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
@allure.feature("–¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
@pytest.mark.auth
class TestAuthentication:
    """–ö–ª–∞—Å—Å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    @allure.story("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    @allure.severity('HIGH')
    @allure.description("""
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
    1. –í–≤–æ–¥ –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """)
    @pytest.mark.smoke
    @pytest.mark.critical
    def test_successful_login(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        login_page = LoginPage(page, config["baseUrl"])
        credentials = config["credentials"]["valid_user"]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success = login_page.login(
            email=credentials["email"],
            password=credentials["password"],
            remember=True
        )
        
        assert success, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
        screenshot_utils.take_screenshot("successful_login")

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    @allure.story("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    @allure.severity('CRITICAL')
    @allure.description("""
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–æ–π.
    
    –¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """)
    @pytest.mark.regression
    def test_login_with_invalid_credentials(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        login_page = LoginPage(page, config["baseUrl"])
        invalid_credentials = config["credentials"]["invalid_user"]
        
        with allure.step("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"):
            login_page.navigate()
            assert login_page.is_login_form_ready(), "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        with allure.step("‚ùå –í–≤–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
            login_page.enter_username(invalid_credentials["email"])
            login_page.enter_password(invalid_credentials["password"])
            
            allure.attach(
                f"Email: {invalid_credentials['email']}\nPassword: [MASKED]",
                "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                allure.attachment_type.TEXT
            )
        
        with allure.step("üö´ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"):
            success = login_page.click_login_button()
            assert not success, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
        
        with allure.step("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"):
            assert login_page.is_error_message_displayed(), "–î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
            
            error_text = login_page.get_error_message()
            assert error_text, "–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            assert any(keyword in error_text.lower() for keyword in ["–æ—à–∏–±–∫–∞", "–Ω–µ–≤–µ—Ä–Ω—ã–π", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"]), \
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: '{error_text}'"
            
            allure.attach(error_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", allure.attachment_type.TEXT)
            screenshot_utils.take_screenshot("invalid_credentials_error")
            
            logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_text}")

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    @allure.story("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    @allure.severity('NORMAL')
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    @pytest.mark.regression
    def test_logout_functionality(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        
        login_page = LoginPage(page, config["baseUrl"])
        credentials = config["credentials"]["valid_user"]
        
        with allure.step("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            success = login_page.login(credentials["email"], credentials["password"])
            assert success, "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
            screenshot_utils.take_screenshot("after_login_before_logout")
            screenshot_utils.take_screenshot("before_logout")
        
        with allure.step("üö™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
            logout_success = login_page.logout()
            assert logout_success, "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            
            screenshot_utils.take_screenshot("after_logout")
        
        with allure.step("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            current_url = page.url
            assert "/auth/" in current_url, f"–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –æ–∂–∏–¥–∞–ª—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω: {current_url}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            assert login_page.is_login_form_ready(), "–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
            
            logging.info("‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è")
    @allure.story("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
    @allure.severity('NORMAL')
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è")
    @pytest.mark.regression
    def test_forgot_password_navigation(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
        
        login_page = LoginPage(page, config["baseUrl"])
        
        with allure.step("üìã –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"):
            login_page.navigate()
            screenshot_utils.take_screenshot("login_page_before_forgot_password")
        
        with allure.step("üîó –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"):
            try:
                login_page.navigate_to_forgot_password()
                screenshot_utils.take_screenshot("forgot_password_page")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
                current_url = page.url
                assert any(keyword in current_url.lower() for keyword in ["forgot", "reset", "recovery"]), \
                    f"URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {current_url}"
                
                logging.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                screenshot_utils.save_error_screenshot("forgot_password_navigation_failed")
                pytest.skip(f"–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã")
    @allure.story("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã")
    @allure.severity('NORMAL')
    @allure.description("""
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    """)
    def test_form_validation(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        login_page = LoginPage(page, config["baseUrl"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞
        assert login_page.is_login_form_ready(), "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
        login_page.click_login_button()
        assert login_page.is_error_message_displayed(), "–ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é email
        login_page.enter_username("invalid_email")
        login_page.click_login_button()
        assert login_page.is_error_message_displayed(), "–ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º email"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è
        login_page.enter_username(config["credentials"]["valid_user"]["email"])
        login_page.enter_password("short")
        login_page.click_login_button()
        assert login_page.is_error_message_displayed(), "–ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ–º –ø–∞—Ä–æ–ª–µ"

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç XSS")
    @allure.story("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    @allure.severity('HIGH')
    @allure.description("""
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç XSS-–∞—Ç–∞–∫:
    1. –í–≤–æ–¥ XSS-—Å–∫—Ä–∏–ø—Ç–∞ –≤ –ø–æ–ª–µ email
    2. –í–≤–æ–¥ XSS-—Å–∫—Ä–∏–ø—Ç–∞ –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞
    """)
    def test_xss_protection(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç XSS-–∞—Ç–∞–∫"""
        login_page = LoginPage(page, config["baseUrl"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞
        assert login_page.is_login_form_ready(), "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        # –ü—Ä–æ–±—É–µ–º –≤–Ω–µ–¥—Ä–∏—Ç—å XSS –≤ –ø–æ–ª–µ email
        xss_payload = "<script>alert('xss')</script>"
        login_page.enter_username(xss_payload)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
        page_content = page.content()
        assert xss_payload not in page_content, "XSS-–∏–Ω—ä–µ–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        assert login_page.is_login_form_ready(), "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ XSS-–ø–æ–ø—ã—Ç–∫–∏"

    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫ XSS")
    @allure.story("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    @allure.severity('HIGH')
    @allure.description("""
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º XSS-–≤–µ–∫—Ç–æ—Ä–∞–º:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö XSS-–≤–µ–∫—Ç–æ—Ä–æ–≤
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML-—Ç–µ–≥–æ–≤
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JavaScript
    4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ XSS-–∞—Ç–∞–∫
    """)
    def test_xss_vulnerability(self, page: Page, config, screenshot_utils):
        """–¢–µ—Å—Ç –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS-–∞—Ç–∞–∫–∞–º"""
        login_page = LoginPage(page, config["baseUrl"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞
        assert login_page.is_login_form_ready(), "–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ XSS-–≤–µ–∫—Ç–æ—Ä—ã
        xss_vectors = [
            "<img src=x onerror=alert('xss')>",
            "javascript:alert('xss')",
            "<svg/onload=alert('xss')>",
            "'-alert('xss')-'"
        ]
        
        for vector in xss_vectors:
            login_page.enter_username(vector)
            login_page.enter_password(vector)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–∫—Ç–æ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
            page_content = page.content()
            assert vector not in page_content, f"XSS-–≤–µ–∫—Ç–æ—Ä {vector} –Ω–µ –±—ã–ª —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            assert login_page.is_login_form_ready(), f"–§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ XSS-–≤–µ–∫—Ç–æ—Ä–∞ {vector}"