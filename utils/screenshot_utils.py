import os
import shutil
import logging
from datetime import datetime, timedelta
from pathlib import Path
from playwright.sync_api import Page
import allure
from PIL import Image, ImageChops
import numpy as np
from config.constants import TEST_RESULTS_DIR, SCREENSHOT_CONFIG

logger = logging.getLogger(__name__)

class ScreenshotUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    
    def __init__(self, page: Page):
        self.page = page
        self.base_dir = TEST_RESULTS_DIR
        self.screenshot_dirs = {
            "baseline": self.base_dir / "screenshots" / "baseline",
            "actual": self.base_dir / "screenshots" / "actual", 
            "diff": self.base_dir / "screenshots" / "diff",
            "errors": self.base_dir / "screenshots" / "errors"
        }
        self.logger = logging.getLogger(self.__class__.__name__)
        self._create_directories()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.cleanup_old_screenshots()

    def _create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        for directory in self.screenshot_dirs.values():
            directory.mkdir(parents=True, exist_ok=True)

    def _get_screenshot_path(self, name: str, screenshot_type: str) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{name}_{timestamp}.png"
        return self.screenshot_dirs[screenshot_type] / filename

    def _cleanup_temp_files(self, name: str):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        temp_dir = self.base_dir / "temp"
        if temp_dir.exists():
            for file in temp_dir.glob(f"temp_{name}_*.png"):
                try:
                    file.unlink()
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file}: {str(e)}")

    def _handle_screenshot_error(self, name: str, error: Exception) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {name}: {str(error)}"
        self.logger.error(error_message)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
        try:
            error_path = self.save_error_screenshot(f"error_{name}")
            allure.attach(
                error_message,
                name="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
                attachment_type=allure.attachment_type.TEXT
            )
            return error_path
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: {str(e)}")
            return ""

    def take_screenshot(self, name: str, screenshot_type: str = "actual") -> str:
        """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
        try:
            path = self._get_screenshot_path(name, screenshot_type)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.page.screenshot(path=str(path), **SCREENSHOT_CONFIG)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Allure –æ—Ç—á–µ—Ç
            allure.attach.file(
                str(path), 
                name=f"üì∏ {name}", 
                attachment_type=allure.attachment_type.PNG
            )
            
            self.logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
            return str(path)
            
        except Exception as e:
            return self._handle_screenshot_error(name, e)

    def compare_with_baseline(self, name: str, threshold: float = 0.1) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –±–∞–∑–æ–≤—ã–º"""
        try:
            baseline_path = self.screenshot_dirs["baseline"] / f"{name}.png"
            actual_path = self.take_screenshot(name, "actual")
            
            if not actual_path:
                return False
                
            if not baseline_path.exists():
                # –ï—Å–ª–∏ –±–∞–∑–æ–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                shutil.copy2(actual_path, baseline_path)
                allure.attach.file(
                    str(baseline_path), 
                    name="üìã –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", 
                    attachment_type=allure.attachment_type.PNG
                )
                self.logger.info(f"–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: {baseline_path}")
                return True
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            return self._compare_images(baseline_path, actual_path, name, threshold)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è {name}: {str(e)}")
            return False

    def _compare_images(self, baseline_path: Path, actual_path: str, name: str, threshold: float) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            baseline = Image.open(baseline_path).convert('RGB')
            actual = Image.open(actual_path).convert('RGB')
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if baseline.size != actual.size:
                self.logger.warning(f"–†–∞–∑–º–µ—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è: {baseline.size} vs {actual.size}")
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä actual –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ baseline
                actual = actual.resize(baseline.size, Image.Resampling.LANCZOS)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
            diff = ImageChops.difference(baseline, actual)
            diff_array = np.array(diff)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∏–π
            total_pixels = diff_array.size
            different_pixels = np.count_nonzero(diff_array)
            diff_percentage = different_pixels / total_pixels
            
            self.logger.info(f"–†–∞–∑–ª–∏—á–∏–π –≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ {name}: {diff_percentage:.2%}")
            
            if diff_percentage > threshold:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º diff –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                diff_path = self._get_screenshot_path(f"{name}_diff", "diff")
                diff.save(diff_path)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
                allure.attach.file(
                    str(baseline_path), 
                    name="üìã –ë–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", 
                    attachment_type=allure.attachment_type.PNG
                )
                allure.attach.file(
                    actual_path, 
                    name="üì∏ –¢–µ–∫—É—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç", 
                    attachment_type=allure.attachment_type.PNG
                )
                allure.attach.file(
                    str(diff_path), 
                    name="üîç –†–∞–∑–ª–∏—á–∏—è", 
                    attachment_type=allure.attachment_type.PNG
                )
                allure.attach(
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∏–π: {diff_percentage:.2%}\n–ü–æ—Ä–æ–≥: {threshold:.2%}",
                    name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                    attachment_type=allure.attachment_type.TEXT
                )
                
                self.logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ —Ä–∞–∑–ª–∏—á–∏–π –¥–ª—è {name}: {diff_percentage:.2%} > {threshold:.2%}")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            return False

    def mask_dynamic_content(self, selectors: list):
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        masked_count = 0
        
        for selector in selectors:
            try:
                elements = self.page.locator(selector)
                count = elements.count()
                
                if count > 0:
                    # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    elements.evaluate_all("elements => elements.forEach(el => el.style.visibility = 'hidden')")
                    masked_count += count
                    self.logger.debug(f"–ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã {selector}: {str(e)}")
        
        if masked_count > 0:
            self.logger.info(f"–ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {masked_count}")

    def save_error_screenshot(self, name: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            error_name = f"ERROR_{name}_{timestamp}"
            path = self.screenshot_dirs["errors"] / f"{error_name}.png"
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            self.page.screenshot(path=str(path), **SCREENSHOT_CONFIG)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            allure.attach.file(
                str(path), 
                name=f"üö® –û—à–∏–±–∫–∞: {name}", 
                attachment_type=allure.attachment_type.PNG
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            page_info = {
                "URL": self.page.url,
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫": self.page.title(),
                "–í—Ä–µ–º—è": datetime.now().isoformat(),
                "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞": str(self.page.viewport_size)
            }
            
            allure.attach(
                "\n".join([f"{key}: {value}" for key, value in page_info.items()]),
                name="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                attachment_type=allure.attachment_type.TEXT
            )
            
            self.logger.error(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path}")
            return str(path)
            
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: {str(e)}")
            return ""

    def cleanup_old_screenshots(self, days: int = 7):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"""
        cutoff_date = datetime.now() - timedelta(days=days)
        deleted_count = 0
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º baseline
        cleanup_dirs = ["actual", "diff", "errors"]
        
        for dir_name in cleanup_dirs:
            directory = self.screenshot_dirs[dir_name]
            
            if not directory.exists():
                continue
                
            for file_path in directory.glob("*.png"):
                try:
                    file_date = datetime.fromtimestamp(file_path.stat().st_ctime)
                    
                    if file_date < cutoff_date:
                        file_path.unlink()
                        deleted_count += 1
                        self.logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
                        
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        
        if deleted_count > 0:
            self.logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")

    def create_comparison_report(self, comparisons: list):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        try:
            report_path = self.base_dir / "screenshot_comparison_report.html"
            
            html_content = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>–û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .comparison { border: 1px solid #ccc; margin: 10px 0; padding: 10px; }
                    .success { background-color: #d4edda; }
                    .failure { background-color: #f8d7da; }
                </style>
            </head>
            <body>
                <h1>üìä –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</h1>
                <p>–°–æ–∑–¥–∞–Ω: {}</p>
            """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            
            for comparison in comparisons:
                status_class = "success" if comparison["success"] else "failure"
                status_text = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if comparison["success"] else "‚ùå –†–∞–∑–ª–∏—á–∏—è –Ω–∞–π–¥–µ–Ω—ã"
                
                html_content += f"""
                <div class="comparison {status_class}">
                    <h3>{comparison["name"]}</h3>
                    <p>–°—Ç–∞—Ç—É—Å: {status_text}</p>
                    <p>–†–∞–∑–ª–∏—á–∏–π: {comparison.get("diff_percentage", "N/A")}</p>
                </div>
                """
            
            html_content += "</body></html>"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            allure.attach.file(
                str(report_path),
                name="üìä –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
                attachment_type=allure.attachment_type.HTML
            )
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {report_path}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

    def wait_for_stable_screenshot(self, name: str, max_attempts: int = 3, delay: float = 1.0) -> str:
        """–ñ–¥–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        import time
        
        previous_screenshot = None
        
        for attempt in range(max_attempts):
            # –ñ–¥–µ–º –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt > 0:
                time.sleep(delay)
            
            # –î–µ–ª–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            temp_path = self.base_dir / "temp" / f"temp_{name}_{attempt}.png"
            temp_path.parent.mkdir(exist_ok=True)
            
            self.page.screenshot(path=str(temp_path), **SCREENSHOT_CONFIG)
            
            if previous_screenshot and self._images_are_identical(previous_screenshot, temp_path):
                # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
                final_path = self.take_screenshot(name)
                self._cleanup_temp_files(name)
                self.logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å –ø–æ—Å–ª–µ {attempt + 1} –ø–æ–ø—ã—Ç–æ–∫")
                return final_path
            
            previous_screenshot = temp_path
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        final_path = self.take_screenshot(name)
        self._cleanup_temp_files(name)
        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return final_path

    def _images_are_identical(self, path1: Path, path2: Path, threshold: float = 0.01) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            img1 = Image.open(path1).convert('RGB')
            img2 = Image.open(path2).convert('RGB')
            
            if img1.size != img2.size:
                return False
            
            diff = ImageChops.difference(img1, img2)
            diff_array = np.array(diff)
            diff_percentage = np.count_nonzero(diff_array) / diff_array.size
            
            return diff_percentage < threshold
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            return False